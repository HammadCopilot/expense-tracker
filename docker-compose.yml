services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense-tracker-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Database
      DATABASE_URL: "mysql://expenseuser:password123@mysql:3306/expense_tracker"
      
      # NextAuth.js
      NEXTAUTH_URL: "http://localhost:3000"
      NEXTAUTH_SECRET: "your-super-secret-key-change-this-in-production"
      
      # AWS S3 / MinIO
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
      AWS_ENDPOINT_URL: "http://minio:9000"
      S3_BUCKET_NAME: "expense-receipts"
      
      # Node
      NODE_ENV: "production"
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - expense-tracker-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: expense-tracker-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password123
      MYSQL_DATABASE: expense_tracker
      MYSQL_USER: expenseuser
      MYSQL_PASSWORD: password123
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword123"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - expense-tracker-network

  # MinIO (Optional - Local S3-compatible object storage for development)
  minio:
    image: minio/minio:latest
    container_name: expense-tracker-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - expense-tracker-network

volumes:
  mysql_data:
  minio_data:

networks:
  expense-tracker-network:
    driver: bridge

